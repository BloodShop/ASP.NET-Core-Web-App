// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReverseEnginereeing.Data;

#nullable disable

namespace ReverseEnginereeing.Migrations
{
    [DbContext(typeof(NadlanDbContext))]
    [Migration("20220904000950_EditIdentityUser")]
    partial class EditIdentityUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser<string>", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IdentityUser<string>");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser<string>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RoleId", "UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("ReverseEnginereeing.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"), 1L, 1);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("char(30)")
                        .IsFixedLength();

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.HasKey("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("ReverseEnginereeing.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"), 1L, 1);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(24)
                        .IsUnicode(false)
                        .HasColumnType("varchar(24)")
                        .HasColumnName("Company Name");

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<string>("Website")
                        .HasMaxLength(124)
                        .HasColumnType("nvarchar(124)");

                    b.HasKey("CompanyId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("ReverseEnginereeing.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"), 1L, 1);

                    b.Property<string>("Alpha2Code")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasColumnName("Alpha-2 Code");

                    b.Property<string>("Alpha3Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("Alpha-3 Code");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Numeric")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength();

                    b.HasKey("CountryId");

                    b.HasIndex(new[] { "CountryName" }, "UQ__Countrie__E056F2012BF2DF16")
                        .IsUnique();

                    b.HasIndex(new[] { "Numeric" }, "UQ__Countrie__FD07398E49BCA584")
                        .IsUnique();

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("ReverseEnginereeing.Models.ExperienceLevel", b =>
                {
                    b.Property<string>("Level")
                        .HasMaxLength(8)
                        .HasColumnType("nchar(8)")
                        .IsFixedLength();

                    b.HasKey("Level")
                        .HasName("PK__Experien__AAF89963FD7FB909");

                    b.ToTable("Experience Levels", (string)null);
                });

            modelBuilder.Entity("ReverseEnginereeing.Models.House", b =>
                {
                    b.Property<int>("HouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("HouseID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HouseId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<DateTime?>("BuiltAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Built At");

                    b.Property<bool>("ForSale")
                        .HasColumnType("bit")
                        .HasColumnName("For Sale");

                    b.Property<int>("NeighborhoodId")
                        .HasColumnType("int")
                        .HasColumnName("NeighborhoodID");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int")
                        .HasColumnName("OwnerID");

                    b.Property<int>("Rooms")
                        .HasColumnType("int");

                    b.Property<int>("SizeM2")
                        .HasColumnType("int")
                        .HasColumnName("Size (M^2)");

                    b.Property<string>("TypeId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .HasColumnName("TypeID")
                        .IsFixedLength();

                    b.Property<decimal>("WantedPrice")
                        .HasColumnType("money")
                        .HasColumnName("Wanted Price");

                    b.HasKey("HouseId");

                    b.HasIndex("NeighborhoodId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TypeId");

                    b.ToTable("Houses");
                });

            modelBuilder.Entity("ReverseEnginereeing.Models.HouseType", b =>
                {
                    b.Property<string>("TypeId")
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .HasColumnName("TypeID")
                        .IsFixedLength();

                    b.HasKey("TypeId")
                        .HasName("PK__House ty__516F039547DF580F");

                    b.ToTable("House types", (string)null);
                });

            modelBuilder.Entity("ReverseEnginereeing.Models.Neighborhood", b =>
                {
                    b.Property<int>("NeighborhoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NeighborhoodID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NeighborhoodId"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("char(30)")
                        .IsFixedLength();

                    b.HasKey("NeighborhoodId");

                    b.HasIndex("CityId");

                    b.ToTable("Neighborhoods");
                });

            modelBuilder.Entity("ReverseEnginereeing.Models.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PersonID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonId"), 1L, 1);

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("First Name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Last Name");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Phone Number");

                    b.HasKey("PersonId");

                    b.HasIndex("CompanyId");

                    b.HasIndex(new[] { "PhoneNumber" }, "UQ__People__79578B9397F0A394")
                        .IsUnique()
                        .HasFilter("[Phone Number] IS NOT NULL");

                    b.ToTable("People");
                });

            modelBuilder.Entity("ReverseEnginereeing.Models.Sale", b =>
                {
                    b.Property<int>("SaleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SaleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SaleId"), 1L, 1);

                    b.Property<int?>("BuyerId")
                        .HasColumnType("int")
                        .HasColumnName("BuyerID");

                    b.Property<decimal?>("FinalPrice")
                        .HasColumnType("money")
                        .HasColumnName("Final Price");

                    b.Property<int>("HouseId")
                        .HasColumnType("int")
                        .HasColumnName("HouseID");

                    b.Property<float>("Income")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValueSql("((0.05))");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Publish Date");

                    b.Property<DateTime?>("SaleDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Sale date");

                    b.Property<int>("SalesManId")
                        .HasColumnType("int")
                        .HasColumnName("SalesManID");

                    b.Property<int>("SellerId")
                        .HasColumnType("int")
                        .HasColumnName("SellerID");

                    b.HasKey("SaleId");

                    b.HasIndex("BuyerId");

                    b.HasIndex("HouseId");

                    b.HasIndex("SalesManId");

                    b.HasIndex("SellerId");

                    b.HasIndex(new[] { "SaleId" }, "UQ__Sales__1EE3C41EB7AF572C")
                        .IsUnique();

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("ReverseEnginereeing.Models.SalesMan", b =>
                {
                    b.Property<int>("SalesManId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SalesManID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalesManId"), 1L, 1);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Birth Date");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("First Name");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Hire Date");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Last Name");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Phone Number");

                    b.HasKey("SalesManId");

                    b.HasIndex("CompanyId");

                    b.HasIndex(new[] { "PhoneNumber" }, "UQ__SalesMen__79578B937FEB9CB2")
                        .IsUnique()
                        .HasFilter("[Phone Number] IS NOT NULL");

                    b.ToTable("SalesMen");
                });

            modelBuilder.Entity("ReverseEnginereeing.Models.Specialization", b =>
                {
                    b.Property<int>("SalesManId")
                        .HasColumnType("int")
                        .HasColumnName("SalesManID");

                    b.Property<string>("TypeId")
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .HasColumnName("TypeID")
                        .IsFixedLength();

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nchar(8)")
                        .IsFixedLength();

                    b.HasKey("SalesManId", "TypeId")
                        .HasName("PK__Speciali__6F0E227E2287D5F7");

                    b.HasIndex("Level");

                    b.HasIndex("TypeId");

                    b.ToTable("Specialization", (string)null);
                });

            modelBuilder.Entity("ReverseEnginereeing.Models.VAvailableHouse", b =>
                {
                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("BuiltAt")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("Built At");

                    b.Property<int>("ForSaleHouseId")
                        .HasColumnType("int")
                        .HasColumnName("For sale HouseID");

                    b.Property<int?>("HouseOwnerId")
                        .HasColumnType("int")
                        .HasColumnName("HouseOwnerID");

                    b.Property<string>("Neighbor")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("char(30)")
                        .IsFixedLength();

                    b.Property<int>("NeighborId")
                        .HasColumnType("int")
                        .HasColumnName("NeighborID");

                    b.Property<int>("Rooms")
                        .HasColumnType("int");

                    b.Property<int>("SameCityId")
                        .HasColumnType("int")
                        .HasColumnName("SameCityID");

                    b.Property<int>("SizeM2")
                        .HasColumnType("int")
                        .HasColumnName("Size (M^2)");

                    b.Property<string>("TypeId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .HasColumnName("TypeID")
                        .IsFixedLength();

                    b.Property<decimal>("WantedPrice")
                        .HasColumnType("money")
                        .HasColumnName("Wanted Price");

                    b.ToView("V_AVAILABLE_HOUSES");
                });

            modelBuilder.Entity("ReverseEnginereeing.Models.VCustomers2yearsExpiry", b =>
                {
                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(61)
                        .HasColumnType("nvarchar(61)")
                        .HasColumnName("Full Name");

                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("PersonID");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Phone Number");

                    b.Property<string>("SaleDate")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("Sale Date");

                    b.ToView("V_CUSTOMERS_2YEARS_EXPIRY");
                });

            modelBuilder.Entity("ReverseEnginereeing.Models.VExcellentWorker", b =>
                {
                    b.Property<int>("SalesManId")
                        .HasColumnType("int")
                        .HasColumnName("SalesManID");

                    b.Property<float?>("TotalIncome")
                        .HasColumnType("real")
                        .HasColumnName("Total Income");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.ToView("V_EXCELLENT_WORKER");
                });

            modelBuilder.Entity("ReverseEnginereeing.Models.VNeighborhoodTotalPrice", b =>
                {
                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("char(30)")
                        .IsFixedLength();

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("char(30)")
                        .IsFixedLength();

                    b.Property<decimal?>("TotalWanted")
                        .HasColumnType("money")
                        .HasColumnName("Total Wanted");

                    b.ToView("V_Neighborhood_TOTAL_Price");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser<string>");

                    b.HasDiscriminator().HasValue("IdentityUser");
                });

            modelBuilder.Entity("ReverseEnginereeing.Models.City", b =>
                {
                    b.HasOne("ReverseEnginereeing.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .IsRequired()
                        .HasConstraintName("FK__Cities__CountryI__2B3F6F97");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ReverseEnginereeing.Models.House", b =>
                {
                    b.HasOne("ReverseEnginereeing.Models.Neighborhood", "Neighborhood")
                        .WithMany("Houses")
                        .HasForeignKey("NeighborhoodId")
                        .IsRequired()
                        .HasConstraintName("FK__Houses__Neighbor__4CA06362");

                    b.HasOne("ReverseEnginereeing.Models.Person", "Owner")
                        .WithMany("Houses")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("FK__Houses__OwnerID__4AB81AF0");

                    b.HasOne("ReverseEnginereeing.Models.HouseType", "Type")
                        .WithMany("Houses")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("FK__Houses__TypeID__4BAC3F29");

                    b.Navigation("Neighborhood");

                    b.Navigation("Owner");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("ReverseEnginereeing.Models.Neighborhood", b =>
                {
                    b.HasOne("ReverseEnginereeing.Models.City", "City")
                        .WithMany("Neighborhoods")
                        .HasForeignKey("CityId")
                        .IsRequired()
                        .HasConstraintName("FK__Neighborh__CityI__2E1BDC42");

                    b.Navigation("City");
                });

            modelBuilder.Entity("ReverseEnginereeing.Models.Person", b =>
                {
                    b.HasOne("ReverseEnginereeing.Models.Company", "Company")
                        .WithMany("People")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK__People__CompanyI__35BCFE0A");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ReverseEnginereeing.Models.Sale", b =>
                {
                    b.HasOne("ReverseEnginereeing.Models.Person", "Buyer")
                        .WithMany("SaleBuyers")
                        .HasForeignKey("BuyerId")
                        .HasConstraintName("FK__Sales__BuyerID__5165187F");

                    b.HasOne("ReverseEnginereeing.Models.House", "House")
                        .WithMany("Sales")
                        .HasForeignKey("HouseId")
                        .IsRequired()
                        .HasConstraintName("FK__Sales__HouseID__5070F446");

                    b.HasOne("ReverseEnginereeing.Models.SalesMan", "SalesMan")
                        .WithMany("Sales")
                        .HasForeignKey("SalesManId")
                        .IsRequired()
                        .HasConstraintName("FK__Sales__SalesManI__5441852A");

                    b.HasOne("ReverseEnginereeing.Models.Person", "Seller")
                        .WithMany("SaleSellers")
                        .HasForeignKey("SellerId")
                        .IsRequired()
                        .HasConstraintName("FK__Sales__SellerID__52593CB8");

                    b.Navigation("Buyer");

                    b.Navigation("House");

                    b.Navigation("SalesMan");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("ReverseEnginereeing.Models.SalesMan", b =>
                {
                    b.HasOne("ReverseEnginereeing.Models.Company", "Company")
                        .WithMany("SalesMen")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK__SalesMen__Compan__3A81B327");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ReverseEnginereeing.Models.Specialization", b =>
                {
                    b.HasOne("ReverseEnginereeing.Models.ExperienceLevel", "LevelNavigation")
                        .WithMany("Specializations")
                        .HasForeignKey("Level")
                        .IsRequired()
                        .HasConstraintName("FK__Specializ__Level__440B1D61");

                    b.HasOne("ReverseEnginereeing.Models.SalesMan", "SalesMan")
                        .WithMany("Specializations")
                        .HasForeignKey("SalesManId")
                        .IsRequired()
                        .HasConstraintName("FK__Specializ__Sales__4222D4EF");

                    b.HasOne("ReverseEnginereeing.Models.HouseType", "Type")
                        .WithMany("Specializations")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("FK__Specializ__TypeI__4316F928");

                    b.Navigation("LevelNavigation");

                    b.Navigation("SalesMan");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("ReverseEnginereeing.Models.City", b =>
                {
                    b.Navigation("Neighborhoods");
                });

            modelBuilder.Entity("ReverseEnginereeing.Models.Company", b =>
                {
                    b.Navigation("People");

                    b.Navigation("SalesMen");
                });

            modelBuilder.Entity("ReverseEnginereeing.Models.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("ReverseEnginereeing.Models.ExperienceLevel", b =>
                {
                    b.Navigation("Specializations");
                });

            modelBuilder.Entity("ReverseEnginereeing.Models.House", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("ReverseEnginereeing.Models.HouseType", b =>
                {
                    b.Navigation("Houses");

                    b.Navigation("Specializations");
                });

            modelBuilder.Entity("ReverseEnginereeing.Models.Neighborhood", b =>
                {
                    b.Navigation("Houses");
                });

            modelBuilder.Entity("ReverseEnginereeing.Models.Person", b =>
                {
                    b.Navigation("Houses");

                    b.Navigation("SaleBuyers");

                    b.Navigation("SaleSellers");
                });

            modelBuilder.Entity("ReverseEnginereeing.Models.SalesMan", b =>
                {
                    b.Navigation("Sales");

                    b.Navigation("Specializations");
                });
#pragma warning restore 612, 618
        }
    }
}
